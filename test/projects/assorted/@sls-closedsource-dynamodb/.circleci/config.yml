workflows:
  version: 2
  node-multi-build:
    jobs:
      - gally
      - test-node-v14.x:
          requires:
            - gally
      - test-node-v16:
          requires:
            - gally
      - deploy-local:
          context: projectName-local
          requires:
            - gally
            - test-node-v14.x
            - test-node-v16
          filters:
            branches:
              only:
                - dev
      - deploy-dev:
          context: projectName-dev
          requires:
            - gally
            - test-node-v14.x
            - test-node-v16
            - deploy-local
          filters:
            branches:
              only:
                - dev
      - deploy-stage:
          context: projectName-stage
          requires:
            - gally
            - test-node-v14.x
            - test-node-v16
          filters:
            branches:
              only:
                - stage
      - deploy-prod:
          context: projectName-prod
          requires:
            - gally
            - test-node-v14.x
            - test-node-v16
          filters:
            branches:
              only:
                - master
version: 2
jobs:
  gally:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - run: sudo yarn global add gally
      - run: gally promote $CIRCLE_BRANCH
  deploy-local:
    docker:
      - image: amazon/aws-sam-cli-build-image-nodejs14.x
    steps:
      - run: yarn -v || npm install --global yarn
      - run: >-
          echo 'export
          PATH=$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH'
          >> $BASH_ENV
      - run: echo 'export LAMBDA_TASK_ROOT=$PWD' >> $BASH_ENV
      - checkout
      - run:
          command: |
            # sync submodules as checkout doesn't do this automatically
            if [[ $(git config --file .gitmodules --get-regexp path) ]]; then
              git submodule sync && git submodule update --init
            fi
      - run:
          command: |
            if [[ -n "${NPM_TOKEN}" ]]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            fi
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run: yarn global add serverless@3.7.5
      - run: yarn run build-clean
      - run: yarn run sls-compile --stack api --region awsRegion --env local
      - run:
          command: sls deploy --config serverless-local-api.config.yml --force
          no_output_timeout: 10m
  deploy-dev:
    docker:
      - image: amazon/aws-sam-cli-build-image-nodejs14.x
    steps:
      - run: yarn -v || npm install --global yarn
      - run: >-
          echo 'export
          PATH=$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH'
          >> $BASH_ENV
      - run: echo 'export LAMBDA_TASK_ROOT=$PWD' >> $BASH_ENV
      - checkout
      - run:
          command: |
            # sync submodules as checkout doesn't do this automatically
            if [[ $(git config --file .gitmodules --get-regexp path) ]]; then
              git submodule sync && git submodule update --init
            fi
      - run:
          command: |
            if [[ -n "${NPM_TOKEN}" ]]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            fi
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run: yarn global add serverless@3.7.5
      - run: yarn run build-clean
      - run: yarn run sls-compile --stack api --region awsRegion --env dev
      - run:
          command: sls deploy --config serverless-dev-api.config.yml --force
          no_output_timeout: 10m
  deploy-stage:
    docker:
      - image: amazon/aws-sam-cli-build-image-nodejs14.x
    steps:
      - run: yarn -v || npm install --global yarn
      - run: >-
          echo 'export
          PATH=$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH'
          >> $BASH_ENV
      - run: echo 'export LAMBDA_TASK_ROOT=$PWD' >> $BASH_ENV
      - checkout
      - run:
          command: |
            # sync submodules as checkout doesn't do this automatically
            if [[ $(git config --file .gitmodules --get-regexp path) ]]; then
              git submodule sync && git submodule update --init
            fi
      - run:
          command: |
            if [[ -n "${NPM_TOKEN}" ]]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            fi
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run: yarn global add serverless@3.7.5
      - run: yarn run build-clean
      - run: yarn run sls-compile --stack api --region awsRegion --env stage
      - run:
          command: sls deploy --config serverless-stage-api.config.yml --force
          no_output_timeout: 10m
  deploy-prod:
    docker:
      - image: amazon/aws-sam-cli-build-image-nodejs14.x
    steps:
      - run: yarn -v || npm install --global yarn
      - run: >-
          echo 'export
          PATH=$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH'
          >> $BASH_ENV
      - run: echo 'export LAMBDA_TASK_ROOT=$PWD' >> $BASH_ENV
      - checkout
      - run:
          command: |
            # sync submodules as checkout doesn't do this automatically
            if [[ $(git config --file .gitmodules --get-regexp path) ]]; then
              git submodule sync && git submodule update --init
            fi
      - run:
          command: |
            if [[ -n "${NPM_TOKEN}" ]]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            fi
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run: yarn global add serverless@3.7.5
      - run: yarn run build-clean
      - run: yarn run sls-compile --stack api --region awsRegion --env prod
      - run:
          command: sls deploy --config serverless-prod-api.config.yml --force
          no_output_timeout: 10m
  test-node-v14.x:
    docker:
      - image: amazon/aws-sam-cli-build-image-nodejs14.x
    steps:
      - run: yarn -v || npm install --global yarn
      - run: >-
          echo 'export
          PATH=$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH'
          >> $BASH_ENV
      - run: echo 'export LAMBDA_TASK_ROOT=$PWD' >> $BASH_ENV
      - checkout
      - run:
          command: |
            # sync submodules as checkout doesn't do this automatically
            if [[ $(git config --file .gitmodules --get-regexp path) ]]; then
              git submodule sync && git submodule update --init
            fi
      - run:
          command: |
            if [[ -n "${NPM_TOKEN}" ]]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            fi
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run: yarn test
      - run: >-
          (git add . && git diff-index --quiet HEAD --) || (git status && exit
          1);
  test-node-v16:
    docker:
      - image: circleci/node:16
    steps:
      - run: yarn -v || npm install --global yarn
      - run: >-
          echo 'export
          PATH=$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH'
          >> $BASH_ENV
      - run: echo 'export LAMBDA_TASK_ROOT=$PWD' >> $BASH_ENV
      - checkout
      - run:
          command: |
            # sync submodules as checkout doesn't do this automatically
            if [[ $(git config --file .gitmodules --get-regexp path) ]]; then
              git submodule sync && git submodule update --init
            fi
      - run:
          command: |
            if [[ -n "${NPM_TOKEN}" ]]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            fi
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run: yarn test
      - run: >-
          (git add . && git diff-index --quiet HEAD --) || (git status && exit
          1);
